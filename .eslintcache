[{"C:\\Users\\JeongSol\\Documents\\nwitter\\src\\index.js":"1","C:\\Users\\JeongSol\\Documents\\nwitter\\src\\components\\App.js":"2","C:\\Users\\JeongSol\\Documents\\nwitter\\src\\components\\Router.js":"3","C:\\Users\\JeongSol\\Documents\\nwitter\\src\\routes\\Home.js":"4","C:\\Users\\JeongSol\\Documents\\nwitter\\src\\routes\\Auth.js":"5","C:\\Users\\JeongSol\\Documents\\nwitter\\src\\fbase.js":"6","C:\\Users\\JeongSol\\Documents\\nwitter\\src\\components\\Navigation.js":"7","C:\\Users\\JeongSol\\Documents\\nwitter\\src\\routes\\Profile.js":"8","C:\\Users\\JeongSol\\Documents\\nwitter\\src\\components\\Nweet.js":"9","C:\\Users\\JeongSol\\Documents\\nwitter\\src\\components\\NweetFactory.js":"10","C:\\Users\\JeongSol\\Documents\\nwitter\\src\\components\\AuthForm.js":"11"},{"size":228,"mtime":1610890842103,"results":"12","hashOfConfig":"13"},{"size":1767,"mtime":1610888777595,"results":"14","hashOfConfig":"13"},{"size":1346,"mtime":1610890053599,"results":"15","hashOfConfig":"13"},{"size":2165,"mtime":1610890343729,"results":"16","hashOfConfig":"13"},{"size":1466,"mtime":1610890302677,"results":"17","hashOfConfig":"13"},{"size":833,"mtime":1610711434699,"results":"18","hashOfConfig":"13"},{"size":1206,"mtime":1610889619812,"results":"19","hashOfConfig":"13"},{"size":1695,"mtime":1610890507334,"results":"20","hashOfConfig":"13"},{"size":2642,"mtime":1610889888544,"results":"21","hashOfConfig":"13"},{"size":2834,"mtime":1610890011022,"results":"22","hashOfConfig":"13"},{"size":2188,"mtime":1610889509258,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"q6gla6",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"26"},"C:\\Users\\JeongSol\\Documents\\nwitter\\src\\index.js",[],["53","54"],"C:\\Users\\JeongSol\\Documents\\nwitter\\src\\components\\App.js",[],"C:\\Users\\JeongSol\\Documents\\nwitter\\src\\components\\Router.js",[],"C:\\Users\\JeongSol\\Documents\\nwitter\\src\\routes\\Home.js",["55","56","57","58","59","60"],"import { dbService, storageService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Nweet from \"components/Nweet\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n    //console.log(userObj);\r\n    const [nweet, setNeweet] = useState(\"\");\r\n    const [nweets, setNeweets] = useState([]);\r\n    const [attachment, setAttachment] = useState(\"\");\r\n    /*const getNeweets = async() => {\r\n        //get은 QuarySnapshot을 return\r\n        const dbNweets = await dbService.collection(\"nweets\").get();\r\n        //내 state에 있는 각각의 document.data()를 console.log\r\n        dbNweets.forEach((document) => //console.log(document.data())); \r\n        { const nweetObject = {\r\n            ...document.data(),\r\n            id: document.id,\r\n        };\r\n            //모든 이전 nweets에 대해 배열을 리턴, 그 배열은 새로 작성한 트윗과 그 이전 것들\r\n            //값 대신에 함수를 전달할 수 있음, 함수를 전달하면 리액트는 이전 값에 접근할 수 있게 해줌\r\n            setNeweets(prev => [nweetObject, ...prev]);\r\n        });\r\n    };*/\r\n    useEffect(() => {\r\n        //getNeweets();\r\n        //위 방식과 이것 중 하나 선택해서 쓰면 됨\r\n        //이 방식은 더 적게 re-render 하기 때문에 더 빠르게 실행되도록 만들어줌\r\n        //무언가를 지우거나 업데이트 하든, 뭘 하든 실행이 됨\r\n            dbService.collection(\"nweets\").onSnapshot(snapshot => {\r\n            const nweetArray = snapshot.docs.map(doc => ({\r\n                id:doc.id,\r\n            ...doc.data(),\r\n        }));\r\n        setNeweets(nweetArray);\r\n        });\r\n    }, []);\r\n    return(\r\n        <div className=\"container\">\r\n            <NweetFactory userObj={userObj} />\r\n            <div style={{ marginTop: 30 }}>\r\n            {nweets.map((nweet) => (\r\n            <Nweet\r\n            key={nweet.id}\r\n            nweetObj={nweet}\r\n            isOwner={nweet.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\nexport default Home;","C:\\Users\\JeongSol\\Documents\\nwitter\\src\\routes\\Auth.js",[],"C:\\Users\\JeongSol\\Documents\\nwitter\\src\\fbase.js",[],"C:\\Users\\JeongSol\\Documents\\nwitter\\src\\components\\Navigation.js",[],"C:\\Users\\JeongSol\\Documents\\nwitter\\src\\routes\\Profile.js",["61"],"import React, { useState } from \"react\";\r\nimport { authService } from \"fbase\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default ({ refreshUser, userObj }) => {\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if(userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n  /*const getMyNweets = async () => {\r\n    const nweets = await dbService\r\n      .collection(\"nweets\")\r\n      .where(\"creatorId\", \"==\", userObj.uid)\r\n      .orderBy(\"createdAt\")\r\n      .get();\r\n    console.log(nweets.docs.map((doc) => doc.data()));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMyNweets();\r\n  }, []);*/\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          onChange={onChange} \r\n          type=\"text\" \r\n          autoFocus\r\n          placeholder=\"Display name\" \r\n          value={newDisplayName}\r\n          className=\"fromInput\"\r\n        />\r\n        <input \r\n          type=\"submit\" \r\n          value=\"Update Profile\"\r\n          className=\"formBtn\"\r\n          style={{\r\n            marginTop: 10,\r\n          }} \r\n        />\r\n      </form>\r\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        Log Out\r\n      </span>\r\n    </div>\r\n  );\r\n};","C:\\Users\\JeongSol\\Documents\\nwitter\\src\\components\\Nweet.js",["62"],"import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Nweet = ( {nweetObj,isOwner} ) => {\r\n    const [editing, setEditing] = useState(false); //editing mode인지 아닌지를 알려줌\r\n    const [newNweet, SetNewNweet] = useState(nweetObj.text); //input에 입력된 text를 업데이트 해줌\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\r\n        //console.log(ok);\r\n        if(ok){\r\n            //delete\r\n            await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n            await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n        }\r\n    };\r\n    const toggleEditing =  () => setEditing(prev => !prev);\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        //console.log(nweetObj, newNweet);\r\n        await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n            text: newNweet,\r\n        });\r\n        setEditing(false);\r\n    };\r\n    const onChange = (event) => {\r\n        const {\r\n            target: {value},\r\n        } = event;\r\n        SetNewNweet(value);\r\n    };\r\n    return (\r\n    <div className=\"nweet\">\r\n        {editing ? (\r\n            <>\r\n            <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n                <input \r\n                    type=\"text\" \r\n                    placeholder=\"Edit your nweet\" \r\n                    value={newNweet} \r\n                    required \r\n                    autoFocus\r\n                    onChange={onChange}\r\n                    className=\"formInput\"\r\n                />\r\n                <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\r\n            </form>\r\n            <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n            Cancel\r\n            </span>\r\n            </>\r\n        ) : (\r\n        <>\r\n            <h4>{nweetObj.text}</h4>\r\n            {nweetObj.attachmentUrl && (\r\n                <img src={nweetObj.attachmentUrl} width=\"50px\" height=\"50px\" />\r\n            )}\r\n            {isOwner && (\r\n            <div class=\"nweet__actions\">\r\n                <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n                </span>\r\n                <span onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n                </span>\r\n            </div>\r\n            )}\r\n        </> \r\n        )}\r\n    </div>\r\n    );\r\n};\r\nexport default Nweet;","C:\\Users\\JeongSol\\Documents\\nwitter\\src\\components\\NweetFactory.js",["63"],"import React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { storageService, dbService } from \"fbase\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NweetFactory = ({ userObj }) => {\r\n  const [nweet, setNweet] = useState(\"\");\r\n  const [attachment, setAttachment] = useState(\"\");\r\n  const onSubmit = async (event) => {\r\n    if (nweet === \"\") {\r\n        return;\r\n      }\r\n    event.preventDefault();\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, \"data_url\");\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n    const nweetObj = {\r\n      text: nweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n    };\r\n    await dbService.collection(\"nweets\").add(nweetObj);\r\n    setNweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNweet(value);\r\n  };\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const theFile = files[0];\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile);\r\n  };\r\n  const onClearAttachment = () => setAttachment(\"\");\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          className=\"factoryInput__input\"\r\n          value={nweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n      </div>\r\n      <label for=\"attach-file\" className=\"factoryInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n    <input\r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        style={{\r\n          opacity: 0,\r\n        }}\r\n      />\r\n      {attachment && (\r\n        <div className=\"factoryForm__attachment\">\r\n        <img\r\n          src={attachment}\r\n          style={{\r\n            backgroundImage: attachment,\r\n          }}\r\n        />\r\n        <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n          <span>Remove</span>\r\n          <FontAwesomeIcon icon={faTimes} />\r\n        </div>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\nexport default NweetFactory;",["64","65"],"C:\\Users\\JeongSol\\Documents\\nwitter\\src\\components\\AuthForm.js",["66"],"import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst inputStyles = {};\r\nconst AuthForm = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] =  useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n    const toggleAccount = () => setNewAccount((prev) => !prev);\r\n    const onChange = (event) => {\r\n        //console.log(event.target.name);\r\n        const {target: {name, value}} = event;\r\n        if(name === \"email\"){\r\n            setEmail(value);\r\n        } else if (name === \"password\"){\r\n            setPassword(value);\r\n        }\r\n    };\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault(); //기본 행위가 실행되는 것을 막아서 내가 컨트롤 할 수 있도록 해줌\r\n        try {\r\n            let data;\r\n            if (newAccount) { //create account\r\n            data = await authService.createUserWithEmailAndPassword(email, password);\r\n        } else { //log in\r\n            data = await authService.signInWithEmailAndPassword(email, password);\r\n        }\r\n        console.log(data);\r\n    } catch(error){\r\n        setError(error.message);\r\n    }};\r\n\r\n    return (\r\n        <>\r\n        <form onSubmit={onSubmit} className=\"container\">\r\n            <input name=\"email\" \r\n            type=\"email\" \r\n            placeholder=\"Email\" \r\n            required value={email}\r\n            onChange={onChange}\r\n            className=\"authInput\"\r\n            />\r\n            <input name=\"password\" \r\n            type=\"password\" \r\n            placeholder=\"Password\" \r\n            required value={password}\r\n            className=\"authInput\"\r\n            onChange={onChange}\r\n            />\r\n            <input type=\"submit\" \r\n            className=\"authInput authSubmit\"\r\n            value={newAccount ? \"Create Account\" : \"Sign In\"} \r\n            />\r\n            {error && <span className=\"authError\">{error}</span>}\r\n        </form>\r\n        <span onClick={toggleAccount} className=\"authSwitch\">\r\n            {newAccount ? \"Sign In\" : \"Create Account\"}\r\n        </span>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AuthForm;",{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":1,"column":21,"nodeType":"73","messageId":"74","endLine":1,"endColumn":35},{"ruleId":"71","severity":1,"message":"75","line":4,"column":16,"nodeType":"73","messageId":"74","endLine":4,"endColumn":22},{"ruleId":"71","severity":1,"message":"76","line":9,"column":12,"nodeType":"73","messageId":"74","endLine":9,"endColumn":17},{"ruleId":"71","severity":1,"message":"77","line":9,"column":19,"nodeType":"73","messageId":"74","endLine":9,"endColumn":28},{"ruleId":"71","severity":1,"message":"78","line":11,"column":12,"nodeType":"73","messageId":"74","endLine":11,"endColumn":22},{"ruleId":"71","severity":1,"message":"79","line":11,"column":24,"nodeType":"73","messageId":"74","endLine":11,"endColumn":37},{"ruleId":"80","severity":1,"message":"81","line":5,"column":1,"nodeType":"82","endLine":64,"endColumn":3},{"ruleId":"83","severity":1,"message":"84","line":57,"column":17,"nodeType":"85","endLine":57,"endColumn":80},{"ruleId":"83","severity":1,"message":"84","line":82,"column":9,"nodeType":"85","endLine":87,"endColumn":11},{"ruleId":"67","replacedBy":"86"},{"ruleId":"69","replacedBy":"87"},{"ruleId":"71","severity":1,"message":"88","line":4,"column":7,"nodeType":"73","messageId":"74","endLine":4,"endColumn":18},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'storageService' is defined but never used.","Identifier","unusedVar","'uuidv4' is defined but never used.","'nweet' is assigned a value but never used.","'setNeweet' is assigned a value but never used.","'attachment' is assigned a value but never used.","'setAttachment' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["89"],["90"],"'inputStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]